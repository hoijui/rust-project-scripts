#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2021 - 2025 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: Unlicense

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

script_path="$(readlink -f "${BASH_SOURCE[0]}")"
# script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"

APP_NAME="Rust project build scripts setup tool"
project_root="$(pwd)"
install_dir_rel='run/rp'

function print_help() {

	echo "$APP_NAME -"
	echo "Sets up these Rust project build scripts"
	echo "for the project at the current directory."
	echo
	echo "Usage:"
	echo "  $script_name [OPTION...]"
	echo "Options:"
	echo "  -h, --help"
	echo "    Show this help message and exit"
	echo "Examples:"
	echo "  $script_name"
	echo "  $script_name --help"
}

# read command-line args
POSITIONAL=()
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		*) # non-/unknown option
			POSITIONAL+=("$arg") # save it in an array for later
			;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

install_dir="$project_root/$install_dir_rel"

if [ -e "$install_dir" ]
then
    if ! [ -d "$install_dir" ]
    then
        >&2 echo "ERROR: '$install_dir' already exists, but is not a directory!"
        exit 1
    fi
    >&2 echo "INFO: Update the build scripts ..."
    git -C "$install_dir" pull --recurse-submodules
    >&2 echo "INFO: Update the build scripts - done."
else
    >&2 echo "INFO: Checking-out the build scripts under '$install_dir_rel' ..."
    git clone --recurse-submodules "https://github.com/hoijui/rust-project-scripts" "$install_dir"
    >&2 echo "INFO: Checking-out the build scripts under '$install_dir_rel' - done."
fi

local_git_ignore_file="$install_dir_rel/.git/info/exclude"
>&2 echo "INFO: Ensure the build scripts are marked as git-ignored (locally/untracked) ..."
if grep -q -r "^/$install_dir_rel/\$" "$local_git_ignore_file"
then
    >&2 echo "INFO: Already ignored - skipping."
else
    >&2 echo "INFO: Setting up the ignore ..."
    echo "/$install_dir_rel/" >> "$local_git_ignore_file"
    >&2 echo "INFO: Setting up the ignore - done."
fi
>&2 echo "INFO: Ensure the build scripts are marked as git-ignored (locally/untracked) - done."

>&2 echo "INFO: done."
